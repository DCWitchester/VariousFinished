*mem2ini.prg
*<Separator/>*
************************************************
LPARAMETERS pMemoryFile
************************************************
	RESTORE FROM <InitialMemoryFile> &&the memory file marker will be replaced at before recompiling the program
	ERASE mem.tmp
	LIST MEMORY LIKE m_* TO mem.tmp NOCONSOLE 
	fi = FOPEN('mem.tmp')
	IF FILE('mem_bak.ini') AND FILE('mem.ini')
		ERASE mem_bak.ini
	ENDIF 
	IF FILE('mem.ini')
		COPY FILE mem.ini TO mem_bak.ini
	ENDIF 
	fo = FCREATE('mem_tmp.ini')
	DO WHILE !FEOF(fi)
		sirCitit = ALLTRIM(FGETS(fi))
		if upper(left(sirCitit,2)) = 'M_'
			spaceAt = at(' ',sirCitit)
			IF spaceAt>0
				numeVar = UPPER(left(sirCitit,spaceAt))
			ELSE
				numeVar = sirCitit
			ENDIF 
			valVar = dataFormat(&numeVar)
			**numeVar = newNumeVar(numeVar)
			IF !EMPTY(numeVar) AND !INLIST(numeVar,'m_tb','m_sc','m_nc','m_lpag')
				=FPUTS(fo, "*")
				=FPUTS(fo, "PUBLIC "+numeVar)
				=FPUTS(fo, numeVar+"= " + valVar )
			ENDIF
		endif
	ENDDO 
	=FCLOSE(fi)
	=FCLOSE(fo)
	=ADIR(arrayMem, 'mem_tmp.ini')
	IF FILE('mem_tmp.ini') AND arrayMem[2] > 0 		&& file size>0
		COPY FILE mem_tmp.ini TO mem.ini
	ENDIF
	IF !FILE('mem.ini') AND FILE('mem_bak.ini')
		** salvare esuata, revenim la date\mem_bak.ini
		COPY FILE mem_bak.ini TO mem.ini
	ENDIF
	**erase step files
	ERASE mem.tmp
	ERASE mem_tmp.ini
	ERASE mem_bak.ini
***return is needed to exit the program
RETURN 
*************************************************
PROCEDURE dataFormat
PARAMETERS value
DO CASE
	CASE TYPE('value')='N'		&& NUMBER
		RETURN ALLTRIM(PADL(value,30))
	CASE TYPE('value')='D'		&& DATE
	    IF EMPTY(value) 
	    	return '{}'
	    ELSE
	    	RETURN "DATE("+PADL(YEAR(value),4)+","+PADL(MONTH(value),2,'0')+","+PADL(DAY(value),2,'0')+")"
	    ENDIF
	CASE TYPE('value')='L'		&& LOGICAL
		RETURN IIF(value,'.T.','.F.')
	OTHERWISE 					&& CHAR
		tmpsir = STRTRAN(value, CHR(13), "" )
		rez=""
		DO WHILE !EMPTY(tmpsir)
			tmpsir = STRTRAN(tmpSIR,'[','<')		
			tmpsir = STRTRAN(tmpSIR,']','>')
			rez = rez + "+["+LEFT(tmpsir,255)+"]"
			tmpsir = SUBSTR(tmpsir,256)			
		ENDDO
		IF LEFT(rez ,1)='+'
			rez = SUBSTR(rez ,2)
		ENDIF 
		IF EMPTY(rez)
			rez = "[]"
		ENDIF 		
		RETURN rez
ENDCASE 
RETURN ''
************************************************
*<Separator/>*
*retreiveProducts.prg
*<Separator/>*
	SELECT 0
	USE fp SHARED ALIAS fpTemp
	**the corections needed for a functional data Synch
	UPDATE fpTemp SET id = RECNO() WHERE EMPTY(id)
	UPDATE fpTemp SET serverid = id WHERE EMPTY(serverid)
	UPDATE fpTemp SET deviceid = <deviceID> WHERE EMPTY(deviceid)
	**the data retrieval
	SELECT * FROM fpTemp INTO CURSOR fpCursor WHERE !synched 
	UPDATE fpTemp SET synched = .T. WHERE !synched
	USE IN fpTemp
	SELECT fpCursor
	handler=FCREATE('<FileName>')
	SCAN
		 insertString = "INSERT INTO produse(local_id,device_id,codp,denm,um,tva,pc,pcv,contp,pv,grupa,fuben,producator,pcval,pvval,codval,data,um2,um1um2,"+;
						"um3,um2um3,incadrare,ct,net,reteta_old,formula,dataexp,lot,codtimbru,divizie,psmentor,codext,denext,"+;
						"cod394,pcrol,pvrol,pcvrol,z_old) "+;
						"VALUES("+dataFormat(fpCursor.serverid)+;
							","+dataFormat(fpCursor.deviceid)+;
							",'"+ALLTRIM(fpCursor.codp)+"'"+;
							",'"+dataFormat(fpCursor.denm)+"'"+;
							",'"+dataFormat(fpCursor.um)+"'"+;
							","+ALLTRIM(STR(fpCursor.tva,2,0))+;
							","+ALLTRIM(STR(fpCursor.pc,20,8))+;
							","+ALLTRIM(STR(fpCursor.pcv,20,8))+;
							",'"+dataFormat(fpCursor.contp)+"'"+;
							","+ALLTRIM(STR(fpCursor.pv,20,8))+;
							",'"+dataFormat(fpCursor.grupa)+"'"+;
							",'"+dataFormat(fpCursor.fuben)+"'"+;
							",'"+dataFormat(fpCursor.producator)+"'"+;
							","+ALLTRIM(STR(fpCursor.pcval,20,8))+;
							","+ALLTRIM(STR(fpCursor.pvval,20,8))+;
							",'"+dataFormat(fpCursor.codval)+"'"+;
							",'"+dataFormat(fpCursor.data)+"'"+;
							",'"+dataFormat(fpCursor.um2)+"'"+;
							","+ALLTRIM(STR(fpCursor.um1um2,10,2))+;
							",'"+dataFormat(fpCursor.um3)+"'"+;
							","+ALLTRIM(STR(fpCursor.um2um3,10,2))+;
							",'"+dataFormat(fpCursor.incadrare)+"'"+;
							","+ALLTRIM(STR(fpCursor.ct,11,4))+;
							","+ALLTRIM(STR(fpCursor.net,11,4))+;
							","+dataFormat(fpCursor.reteta)+;
							",'"+dataFormat(fpCursor.formula)+"'"+;
							",'"+dataFormat(fpCursor.dataexp)+"'"+;
							",'"+dataFormat(fpCursor.lot)+"'"+;
							",'"+dataFormat(fpCursor.codtimbru)+"'"+;
							",'"+dataFormat(fpCursor.divizie)+"'"+;
							","+ALLTRIM(STR(fpCursor.psmentor,10,0))+;
							",'"+dataFormat(fpCursor.codext)+"'"+;
							",'"+dataFormat(fpCursor.denext)+"'"+;
							",'"+dataFormat(fpCursor.cod394)+"'"+;
							","+ALLTRIM(STR(fpCursor.pcrol,20,8))+;
							","+ALLTRIM(STR(fpCursor.pvrol,20,8))+;
							","+ALLTRIM(STR(fpCursor.pcvrol,20,8))+""+;
							","+dataFormat(fpCursor.z_)+")"+CHR(13)+;
							"ON CONFLICT (local_id,device_id) DO UPDATE SET "+;
							"codp = "+"'"+ALLTRIM(fpCursor.codp)+"'"+;
							",denm = "+"'"+dataFormat(fpCursor.denm)+"'"+;
							",um = "+"'"+dataFormat(fpCursor.um)+"'"+;
							",tva = "+ALLTRIM(STR(fpCursor.tva,2,0))+;
							",pc = "+ALLTRIM(STR(fpCursor.pc,20,8))+;
							",pcv = "+ALLTRIM(STR(fpCursor.pcv,20,8))+;
							",contp = "+"'"+dataFormat(fpCursor.contp)+"'"+;
							",pv = "+ALLTRIM(STR(fpCursor.pv,20,8))+;
							",grupa = "+"'"+dataFormat(fpCursor.grupa)+"'"+;
							",fuben = "+"'"+dataFormat(fpCursor.fuben)+"'"+;
							",producator = "+"'"+dataFormat(fpCursor.producator)+"'"+;
							",pcval = "+ALLTRIM(STR(fpCursor.pcval,20,8))+;
							",pvval ="+ALLTRIM(STR(fpCursor.pvval,20,8))+;
							",codval = "+"'"+dataFormat(fpCursor.codval)+"'"+;
							",data = "+"'"+dataFormat(fpCursor.data)+"'"+;
							",um2 = "+"'"+dataFormat(fpCursor.um2)+"'"+;
							",um1um2 = "+ALLTRIM(STR(fpCursor.um1um2,10,2))+;
							",um3 = "+"'"+dataFormat(fpCursor.um3)+"'"+;
							",um2um3 = "+ALLTRIM(STR(fpCursor.um2um3,10,2))+;
							",incadrare = "+"'"+dataFormat(fpCursor.incadrare)+"'"+;
							",ct = "+ALLTRIM(STR(fpCursor.ct,11,4))+;
							",net = "+ALLTRIM(STR(fpCursor.net,11,4))+;
							",reteta_old = "+dataFormat(fpCursor.reteta)+;
							",formula = "+"'"+dataFormat(fpCursor.formula)+"'"+;
							",dataexp = "+"'"+dataFormat(fpCursor.dataexp)+"'"+;
							",lot = "+"'"+dataFormat(fpCursor.lot)+"'"+;
							",codtimbru ="+"'"+dataFormat(fpCursor.codtimbru)+"'"+;
							",divizie = "+"'"+dataFormat(fpCursor.divizie)+"'"+;
							",psmentor = "+ALLTRIM(STR(fpCursor.psmentor,10,0))+;
							",codext ="+"'"+dataFormat(fpCursor.codext)+"'"+;
							",denext = "+"'"+dataFormat(fpCursor.denext)+"'"+;
							",cod394 = "+"'"+dataFormat(fpCursor.cod394)+"'"+;
							",pcrol = "+ALLTRIM(STR(fpCursor.pcrol,20,8))+;
							",pvrol ="+ALLTRIM(STR(fpCursor.pvrol,20,8))+;
							",pcvrol = "+""+ALLTRIM(STR(fpCursor.pcvrol,20,8))+""+;
							",z_old = "+dataFormat(fpCursor.z_)+";"
		=fputs(handler,insertString)
	ENDSCAN
	=fclose(handler)
	USE IN fpCursor
	CLOSE DATABASES ALL
	CLEAR ALL
***return is needed to exit the program
RETURN 
*************************************************
PROCEDURE dataFormat
PARAMETERS value
	IF VARTYPE(value)=="N"
		RETURN ALLTRIM(STR(value,20))
	ENDIF
	IF VARTYPE(value)=="D"
		IF(EMPTY(value)) 
			RETURN '2000-01-01'
		ELSE
			newDate = PADL(YEAR(value),4,'0')+'-'+PADL(MONTH(value),2,'0')+'-'+PADL(DAY(value),2,'0')
			RETURN newDate
		ENDIF
	ENDIF
	IF VARTYPE(value)=="C"
		RETURN ALLTRIM(STRTRAN(STRTRAN(value,"'",""),'"',''))
	ENDIF
	IF VARTYPE(value)=="L"
		RETURN IIF(value,"true","false")
	ENDIF
RETURN
*************************************************
*<Separator/>*
*retreiveSales.prg
*<Separator/>*
	SELECT 0
	USE <SalesFile> SHARED ALIAS faTemp
	**the corections needed for a functional data Synch
	UPDATE faTemp SET id = RECNO() WHERE EMPTY(id)
	UPDATE faTemp SET serverid = id WHERE EMPTY(serverid)
	UPDATE faTemp SET deviceid = <deviceID> WHERE EMPTY(deviceid)
	**the retrieval of the data Structure so that i can close the files
	SELECT * FROM faTemp INTO CURSOR faCursor WHERE !synched 
	UPDATE faTemp SET synched = .T. WHERE !synched
	USE IN faTemp
	SELECT faCursor
	handler=FCREATE('<FileName>')
	SCAN
		sqlString = "INSERT INTO facturi(local_id, device_id, pac, nrdoc, data, gest, fuben, datasc, agent, aviz, achit,"+;
										"delegat, mijltr, tvac, codval, codp, denp, um, cant, pc, prad, pcv, pv, operator,"+;
										"tora, nrcontr, jurntva, zona, lot, nrnota, dl, codfiscal, andoc, lunadoc, div,"+;
										"electro, pcvpv, tip394, pnum, pcard, pbonm, pvira, cui, nume, judet, tara, z_old, blocat_old)"+;
										"VALUES("+dataFormat(serverid)+;
										","+dataFormat(deviceid)+;
										","+dataFormat(pac)+;
										","+ALLTRIM(STR(nrdoc,10,0))+;
										","+dataFormat(data)+;
										","+dataFormat(gest)+;
										","+dataFormat(fuben)+;
										","+dataFormat(datasc)+;
										","+dataFormat(agent)+;
										","+ALLTRIM(STR(aviz,10,0))+;
										","+dataFormat(achit)+;
										","+dataFormat(delegat)+;
										","+dataFormat(mijltr)+;
										","+ALLTRIM(STR(tvac,2,0))+;
										","+dataFormat(codval)+;
										","+dataFormat(codp)+;
										","+dataFormat(denp)+;
										","+dataFormat(um)+;
										","+ALLTRIM(STR(cant,13,4))+;
										","+ALLTRIM(STR(pc,20,8))+;
										","+ALLTRIM(STR(prad,10,4))+;
										","+ALLTRIM(STR(pcv,20,8))+;
										","+ALLTRIM(STR(pv,20,8))+;
										","+dataFormat(operator)+;
										","+dataFormat(tora)+;
										","+ALLTRIM(STR(nrcontr,10,0))+;
										","+dataFormat(jurntva)+;
										","+dataFormat(zona)+;
										","+dataFormat(lot)+;
										","+ALLTRIM(STR(nrnota,3,0))+;
										","+dataFormat(dl)+;
										","+dataFormat(codfiscal)+;
										","+ALLTRIM(STR(andoc,4,0))+;
										","+ALLTRIM(STR(lunadoc,2,0))+;
										","+dataFormat(div)+;
										","+dataFormat(electro)+;
										","+dataFormat(pcvpv)+;
										","+dataFormat(tip394)+;
										","+ALLTRIM(STR(pnum,15,2))+;
										","+ALLTRIM(STR(pcard,15,2))+;
										","+ALLTRIM(STR(pbonm,15,2))+;
										","+ALLTRIM(STR(pvira,15,2))+;
										","+dataFormat(cui)+;
										","+dataFormat(nume)+;
										","+dataFormat(judet)+;
										","+dataFormat(tara)+;
										","+dataFormat(z_)+;
										","+dataFormat(blocat)+")"+CHR(13)+;
										"ON CONFLICT(local_id, device_id) DO UPDATE SET "+;
										"pac = "+dataFormat(pac)+;
										", nrdoc = "+ALLTRIM(STR(nrdoc,10,0))+;
										", data = "+dataFormat(data)+;
										", gest = "+dataFormat(gest)+;
										", fuben = "+dataFormat(fuben)+;
										", datasc = "+dataFormat(datasc)+;
										", agent = "+dataFormat(agent)+;
										", aviz = "+ALLTRIM(STR(aviz,10,0))+;
										", achit = "+dataFormat(achit)+;
										", delegat = "+dataFormat(delegat)+;
										", mijltr = "+dataFormat(mijltr)+;
										", tvac = "+ALLTRIM(STR(tvac,2,0))+;
										", codval = "+dataFormat(codval)+;
										", codp = "+dataFormat(codp)+;
										", denp = "+dataFormat(denp)+;
										", um = "+dataFormat(um)+;
										", cant = "+ALLTRIM(STR(cant,13,4))+;
										", pc = "+ALLTRIM(STR(pc,20,8))+;
										", prad = "+ALLTRIM(STR(prad,10,4))+;
										", pcv = "+ALLTRIM(STR(pcv,20,8))+;
										", pv = "+ALLTRIM(STR(pv,20,8))+;
										", operator = "+dataFormat(operator)+;
										", tora = "+dataFormat(tora)+;
										", nrcontr = "+ALLTRIM(STR(nrcontr,10,0))+;
										", jurntva = "+dataFormat(jurntva)+;
										", zona = "+dataFormat(zona)+;
										", lot = "+dataFormat(lot)+;
										", nrnota = "+ALLTRIM(STR(nrnota,3,0))+;
										", dl = "+dataFormat(dl)+;
										", codfiscal = "+dataFormat(codfiscal)+;
										", andoc = "+ALLTRIM(STR(andoc,4,0))+;
										", lunadoc = "+ALLTRIM(STR(lunadoc,2,0))+;
										", div = "+dataFormat(div)+;
										", electro = "+dataFormat(electro)+;
										", pcvpv = "+dataFormat(pcvpv)+;
										", tip394 = "+dataFormat(tip394)+;
										", pnum = "+ALLTRIM(STR(pnum,15,2))+;
										", pcard = "+ALLTRIM(STR(pcard,15,2))+;
										", pbonm = "+ALLTRIM(STR(pbonm,15,2))+;
										", pvira = "+ALLTRIM(STR(pvira,15,2))+;
										", cui = "+dataFormat(cui)+;
										", nume = "+dataFormat(nume)+;
										", judet = "+dataFormat(judet)+;
										", tara = "+dataFormat(tara)+;
										", z_old = "+dataFormat(z_)+;
										", blocat_old = "+dataFormat(blocat)+";"			
		=FPUTS(handler,sqlString)
	ENDSCAN
	=FCLOSE(handler)
	USE IN faCursor
	CLOSE DATABASES ALL
	CLEAR ALL
RETURN 
*************************************************
PROCEDURE dataFormat
PARAMETERS value
	IF VARTYPE(value)=="N"
		RETURN ALLTRIM(STR(value,20))
	ENDIF
	IF VARTYPE(value)=="D"
		IF(EMPTY(value)) 
			RETURN "'2000-01-01'"
		ELSE
			newDate = "'"+PADL(YEAR(value),4,'0')+'-'+PADL(MONTH(value),2,'0')+'-'+PADL(DAY(value),2,'0')+"'"
			RETURN newDate
		ENDIF
	ENDIF
	IF VARTYPE(value)=="C"
		RETURN "'" + ALLTRIM(STRTRAN(STRTRAN(value,"'",""),'"',''))+ "'"
	ENDIF
	IF VARTYPE(value)=="L"
		RETURN IIF(value,"true","false")
	ENDIF
RETURN
*************************************************
*<Separator/>*