#pragma checksum "D:\locationDisplay\LocationDisplay\LocationDisplay\Pages\History.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4ef64e07414b5ba339459ed2bdfc27a4c1d423bc"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace LocationDisplay.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\locationDisplay\LocationDisplay\LocationDisplay\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\locationDisplay\LocationDisplay\LocationDisplay\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\locationDisplay\LocationDisplay\LocationDisplay\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\locationDisplay\LocationDisplay\LocationDisplay\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\locationDisplay\LocationDisplay\LocationDisplay\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\locationDisplay\LocationDisplay\LocationDisplay\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\locationDisplay\LocationDisplay\LocationDisplay\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\locationDisplay\LocationDisplay\LocationDisplay\_Imports.razor"
using LocationDisplay;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\locationDisplay\LocationDisplay\LocationDisplay\_Imports.razor"
using LocationDisplay.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\locationDisplay\LocationDisplay\LocationDisplay\Pages\History.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\locationDisplay\LocationDisplay\LocationDisplay\Pages\History.razor"
using GoogleMapsComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\locationDisplay\LocationDisplay\LocationDisplay\Pages\History.razor"
using GoogleMapsComponents.Maps;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/history")]
    public partial class History : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 58 "D:\locationDisplay\LocationDisplay\LocationDisplay\Pages\History.razor"
       
    LocationDisplay.PageControllers.HistoryController historyController = new PageControllers.HistoryController();
    List<PublicObjects.LocationHistory> locations = new List<PublicObjects.LocationHistory>();
    List<PublicObjects.AnimatedLocationHistory> animatedLocations = new List<PublicObjects.AnimatedLocationHistory>();
    /*
    List<DatabaseConnection.DatabaseObjects.ServerLocation> locations = new List<DatabaseConnection.DatabaseObjects.ServerLocation>();
    GoogleMapsComponents.Maps.Marker marker;
    Polyline polyline;
    */

    public static List<Polyline> polylines = new List<Polyline>();


    private GoogleMap map1 = new GoogleMap();
    private MapOptions mapOptions = new MapOptions() {
        Zoom = 15,
        Center = new LatLngLiteral()
        {
            Lat = 44.18989707,
            Lng = 28.62403504
        },
        MapTypeId = MapTypeId.Roadmap
    };

    private void ValidateFilter()
    {
        historyController.CheckDate();
        DisplayHistoryMap();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => DisplayHistoryMap());
    }

    private void RetrieveSettings()
    {
        List<DatabaseConnection.DatabaseObjects.ServerLocation> locationList = new List<DatabaseConnection.DatabaseObjects.ServerLocation>();
        DatabaseConnection.DatabaseLink.LocationFunctions.RetrieveSpecificLocationHistory(locationList, historyController);
        locations = PublicObjects.LocationHistory.GetLocationsFromServer(locationList);
        map1.InteropObject.PanTo(PublicObjects.LocationHistory.GetCenterOfLocations(locationList));

    }
    private async void DisplayHistoryPolylines()
    {
        foreach (var polilyne in polylines) await polilyne.SetMap(null);
        Int32 displayColor = 0;
        foreach(PublicObjects.LocationHistory location in locations)
        {
            polylines.Add(await Polyline.CreateAsync(map1.JsRuntime,
                new PolylineOptions()
                {
                    StrokeColor = Miscellaneous.ColorSettings.getColorOfPolygonColor(displayColor).Name,
                    StrokeOpacity = 1,
                    StrokeWeight = 1,
                    Map = map1.InteropObject,
                    Path = location.getPolylineList()
                }
                )) ;
            displayColor++;
        }
    }
    private async void DisplayHistoryMap()
    {
        await Task.Run(() => RetrieveSettings()).ContinueWith(t=>DisplayHistoryPolylines());
    }
    private async void DisplayAnimatedHistoryMap()
    {
        await Task.Run(() => RetrieveSettings()).ContinueWith(t=>InitializePolylines());
    }

    private async void InitializePolylines()
    {
        foreach (var polilyne in polylines) await polilyne.SetMap(null);
        if(animatedLocations != null)
        {
            foreach (var element in animatedLocations) await Task.Run(() =>
            {
                if(element.polyline != null) element.polyline.SetMap(null);
                if(element.marker != null) element.marker.SetMap(null);
            });
        }
        Int32 displayColor = 0;
        foreach(var location in locations)
        {
            animatedLocations.Add(new PublicObjects.AnimatedLocationHistory()
            {
                AgentCode = location.AgentCode,
                PolylineColor = Miscellaneous.ColorSettings.getColorOfPolygonColor(displayColor).Name,
                completePath = location.getPolylineList()

            });
            displayColor++;
        }
        foreach(var element in animatedLocations)
        {
            await Task.Run(()=>AnimatePolyline(element));
        }
    }

    private async void AnimatePolyline(PublicObjects.AnimatedLocationHistory animatedLocationHistory)
    {
        foreach(var element in animatedLocationHistory.completePath)
        {
            if (animatedLocationHistory.polyline == null)
            {
                animatedLocationHistory.polyline = await Polyline.CreateAsync(map1.JsRuntime, new PolylineOptions()
                {
                    StrokeColor = animatedLocationHistory.PolylineColor,
                    StrokeWeight = 2,
                    Map = map1.InteropObject
                });
            }
            else
            {
#pragma warning disable CS4014
                animatedLocationHistory.polyline.SetPath(animatedLocationHistory.currentPath);
#pragma warning restore
            }
            if(animatedLocationHistory.marker == null)
            {
                animatedLocationHistory.marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
                {
                    Position = new LatLngLiteral()
                    {
                        Lat = element.Lat,
                        Lng = element.Lng
                    },
                    Map = map1.InteropObject
                });
            }
            else
            {
#pragma warning disable CS4014
                animatedLocationHistory.marker.SetPosition(new LatLngLiteral()
                {
                    Lat = element.Lat,
                    Lng = element.Lng
                });
#pragma warning restore
            }
            animatedLocationHistory.currentPath.Add(new LatLngLiteral()
            {
                Lat = element.Lat,
                Lng = element.Lng
            });
            System.Threading.Thread.Sleep(100);
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
