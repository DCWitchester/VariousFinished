@page "/history"

@using System.Threading.Tasks
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

@inject IJSRuntime JSRuntime

<h1>Istoric Agent</h1>

@if (locations == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div style=" background-color: #80aaff; border : solid black 1px; margin-bottom: 2px; display: flex ">
        <EditForm Model="historyController"> 
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div>
                <p>
                    <div style="margin-top:10px; margin-left:10px" s>
                        <label>
                            Coduri Agent:
                            <InputText @bind-Value="historyController.AgentFilter" />
                        </label>
                    </div>
                </p>
                <h5 style="margin-left:10px">Perioda afisata</h5>
                <p>
                    <div style="margin-left:10px">
                        <label style="margin-right:2px">
                            Moment initial:
                            <input type="date" @bind-value="@(historyController.initialDateTime.date)" />
                            <input type="time" @bind-value="@(historyController.initialDateTime.time)"/>
                        </label>
                        <label style="margin-right:2px">
                            Moment final:
                            <input type="date" @bind-value="@(historyController.finalDateTime.date)" />
                            <input type="time" @bind-value="@(historyController.finalDateTime.time)" />
                        </label>
                    </div>
                </p>
                <p>
                    <div style="margin-left:10px">
                        <button id="btnStaticHistory" type="submit" class="btn-primary" @onclick="ValidateFilter">Afiseaza Istoric</button>
                        <button id="btnAnimatedHistory" type="submit" class="btn-primary" @onclick = "DisplayAnimatedHistoryMap">Afiseaza Animatie Istoric</button>
                    </div>
                </p>
            </div>
        </EditForm>
    </div>
    <GoogleMap @ref="@(this.map1)" Id="map1" Options="@(this.mapOptions)"></GoogleMap>
}

@code {
    LocationDisplay.PageControllers.HistoryController historyController = new PageControllers.HistoryController();
    List<PublicObjects.LocationHistory> locations = new List<PublicObjects.LocationHistory>();
    List<PublicObjects.AnimatedLocationHistory> animatedLocations = new List<PublicObjects.AnimatedLocationHistory>();

    /*
    List<DatabaseConnection.DatabaseObjects.ServerLocation> locations = new List<DatabaseConnection.DatabaseObjects.ServerLocation>();
    GoogleMapsComponents.Maps.Marker marker;
    Polyline polyline;
    */

    public static List<Polyline> polylines = new List<Polyline>();

    private GoogleMap map1 = new GoogleMap();

    private MapOptions mapOptions = new MapOptions() {
        Zoom = 15,
        Center = new LatLngLiteral()
        {
            Lat = 44.18989707,
            Lng = 28.62403504
        },
        MapTypeId = MapTypeId.Roadmap
    };

    private void ValidateFilter()
    {
        historyController.CheckDate();
        DisplayHistoryMap();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => DisplayHistoryMap());
    }

    private void RetrieveSettings()
    {
        List<DatabaseConnection.DatabaseObjects.ServerLocation> locationList = new List<DatabaseConnection.DatabaseObjects.ServerLocation>();
        DatabaseConnection.DatabaseLink.LocationFunctions.RetrieveSpecificLocationHistory(locationList, historyController);
        locations = PublicObjects.LocationHistory.GetLocationsFromServer(locationList);
        map1.InteropObject.PanTo(PublicObjects.LocationHistory.GetCenterOfLocations(locationList));
    }

    private async void DisplayHistoryPolylines()
    {
        foreach (var polilyne in polylines) await polilyne.SetMap(null);
        Int32 displayColor = 0;
        foreach(PublicObjects.LocationHistory location in locations)
        {
            polylines.Add(await Polyline.CreateAsync(map1.JsRuntime,
                new PolylineOptions()
                {
                    StrokeColor = Miscellaneous.ColorSettings.getColorOfPolygonColor(displayColor).Name,
                    StrokeOpacity = 1,
                    StrokeWeight = 1,
                    Map = map1.InteropObject,
                    Path = location.getPolylineList()
                }
                )) ;
            displayColor++;
        }
    }

    private async void DisplayHistoryMap()
    {
        await Task.Run(() => RetrieveSettings()).ContinueWith(t=>DisplayHistoryPolylines());
    }

    private async void DisplayAnimatedHistoryMap()
    {
        await Task.Run(() => RetrieveSettings()).ContinueWith(t=>InitializePolylines());
    }

    private async void InitializePolylines()
    {
        foreach (var polilyne in polylines) await polilyne.SetMap(null);
        if(animatedLocations != null)
        {
            foreach (var element in animatedLocations) await Task.Run(() =>
            {
                if(element.polyline != null) element.polyline.SetMap(null);
                if(element.marker != null) element.marker.SetMap(null);
            });
        }
        Int32 displayColor = 0;
        animatedLocations = new List<PublicObjects.AnimatedLocationHistory>();
        foreach(var location in locations)
        {
            animatedLocations.Add(new PublicObjects.AnimatedLocationHistory()
            {
                AgentCode = location.AgentCode,
                PolylineColor = Miscellaneous.ColorSettings.getColorOfPolygonColor(displayColor).Name,
                completePath = location.getPolylineList()

            });
            displayColor++;
        }
        foreach(var element in animatedLocations)
        {
            await Task.Run(()=>AnimatePolyline(element));
        }
    }

    private async void AnimatePolyline(PublicObjects.AnimatedLocationHistory animatedLocationHistory)
    {
        foreach(var element in animatedLocationHistory.completePath)
        {
            if (animatedLocationHistory.polyline == null)
            {
                animatedLocationHistory.polyline = await Polyline.CreateAsync(map1.JsRuntime, new PolylineOptions()
                {
                    StrokeColor = animatedLocationHistory.PolylineColor,
                    StrokeWeight = 2,
                    Map = map1.InteropObject
                });
            }
            else
            {
#pragma warning disable CS4014
                animatedLocationHistory.polyline.SetPath(animatedLocationHistory.currentPath);
#pragma warning restore
            }
            if(animatedLocationHistory.marker == null)
            {
                animatedLocationHistory.marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
                {
                    Position = new LatLngLiteral()
                    {
                        Lat = element.Lat,
                        Lng = element.Lng
                    },
                    Map = map1.InteropObject,
                    Title = animatedLocationHistory.AgentCode
                });
            }
            else
            {
#pragma warning disable CS4014
                animatedLocationHistory.marker.SetPosition(new LatLngLiteral()
                {
                    Lat = element.Lat,
                    Lng = element.Lng
                });
#pragma warning restore
            }
            animatedLocationHistory.currentPath.Add(new LatLngLiteral()
            {
                Lat = element.Lat,
                Lng = element.Lng
            });
            System.Threading.Thread.Sleep(100);
        }
    }

}
