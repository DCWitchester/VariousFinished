@page "/location"

@using LocationDisplay.Data
@using System.Threading.Tasks
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

@inject IJSRuntime JSRuntime

<h1>Locatie Agent</h1>

@if (currentLocations == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div style=" background-color: #80aaff; border : solid black 1px; margin-bottom: 2px; display: flex ">
        <EditForm Model="locationController">
            <div>
                <p>
                    <div style="margin-top:10px; margin-left:10px" s>
                        <label>
                            Coduri Agent:
                            <InputText @bind-Value="locationController.AgentFilter" />
                        </label>
                    </div>
                </p>
                <p>
                    <div style="margin-left:10px">
                        <button id="btnStaticHistory" type="submit" class="btn-primary" @onclick="InitializeCurrentLocations">Filtreaza Agenti</button>
                    </div>
                </p>
            </div>
        </EditForm>
    </div>
    <GoogleMap @ref="@(this.map1)" Id="map1" Options="@(this.mapOptions)"></GoogleMap>
}

@code {
    private GoogleMap map1 = new GoogleMap();

    private MapOptions mapOptions = new MapOptions()
    {
        Zoom = 15,
        Center = new LatLngLiteral()
        {
            Lat = 44.18989707,
            Lng = 28.62403504
        },
        MapTypeId = MapTypeId.Roadmap
    };

    private LocationDisplay.PageControllers.LocationController locationController = new PageControllers.LocationController();
    private List<PublicObjects.CurrentLocation> currentLocations = new List<PublicObjects.CurrentLocation>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => InitializeCurrentLocations());
#pragma warning disable CS4014
        Task.Run(() => DisplayStart());
#pragma warning restore
    }

    private async void InitializeCurrentLocations()
    {
        List<DatabaseConnection.DatabaseObjects.CurrentAgentLocation> currentAgentLocations
                        = new List<DatabaseConnection.DatabaseObjects.CurrentAgentLocation>();
        await Task.Run(()=>ResetMapElements());
        DatabaseConnection.DatabaseLink.LocationFunctions.RetrieveCurrentLocation(locationController, currentAgentLocations);
        currentLocations = PublicObjects.CurrentLocation.GetLocationsFromServer(currentAgentLocations);
        Int32 displayColor = 0;
        foreach (var element in currentLocations)
        {
            element.PathColor = Miscellaneous.ColorSettings.getColorOfPolygonColor(displayColor).Name;
            displayColor++;
        }
    }

    private async void ResetMapElements()
    {
        if(currentLocations!= null)
        {
            foreach (var element in currentLocations) await Task.Run(() =>
            {
                if (element.CurrentPath != null) element.CurrentPath.SetMap(null);
                if (element.CurrentLocationMarker != null) element.CurrentLocationMarker.SetMap(null);
            });
            currentLocations = new List<PublicObjects.CurrentLocation>();
        }
    }

    private async void DisplayStart()
    {
        do
        {
            foreach (var element in currentLocations)
            {
                await Task.Run(() => InitializeAgentLocation(element)).ContinueWith(t => UpdateAgentLocation(element));
            }
            System.Threading.Thread.Sleep(LocationDisplay.PublicObjects.Settings.AnimationSpeed);
        }while (true);
    }


    private async void InitializeAgentLocation(PublicObjects.CurrentLocation agentLocation)
    {
        if(agentLocation.CurrentLocationMarker == null)
            agentLocation.CurrentLocationMarker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
            {
                Position = agentLocation.CurrentLocationPoint,
                Map = map1.InteropObject,
                Title = agentLocation.AgentCode
            });
        if(agentLocation.CurrentPath == null) agentLocation.CurrentPath = await Polyline.CreateAsync(map1.JsRuntime, new PolylineOptions()
        {
            StrokeColor = agentLocation.PathColor,
            StrokeWeight = 2,
            Map = map1.InteropObject
        });
    }

#pragma warning disable CS1998
    private async void UpdateAgentLocation(PublicObjects.CurrentLocation agentLocation)
    {
        LatLngLiteral newPoint = DatabaseConnection.DatabaseLink.LocationFunctions.RetrieveCurrentLocation(agentLocation.AgentCode);
        if (newPoint == null || newPoint == agentLocation.CurrentLocationPoint) return;
        else
        {
            agentLocation.PathPoints.Add(agentLocation.CurrentLocationPoint);
            agentLocation.CurrentLocationPoint = newPoint;
#pragma warning disable CS4014
            agentLocation.CurrentLocationMarker.SetPosition(agentLocation.CurrentLocationPoint);
            agentLocation.CurrentPath.SetPath(agentLocation.PathPoints);
#pragma warning restore
        }
    }
#pragma warning restore

    private async void FilterAgentLocation()
    {
        await Task.Run(() => InitializeCurrentLocations());
    }

}